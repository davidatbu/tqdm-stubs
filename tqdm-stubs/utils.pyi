from collections import MutableMapping
from typing import Any, Optional, Protocol

# CUR_OS: Any
# IS_WIN: Any
# IS_NIX: Any
# RE_ANSI: Any
# WeakSet = set

# class FormatReplace:
#    replace: Any = ...
#    format_called: int = ...
#    def __init__(self, replace: str = ...) -> None: ...
#    def __format__(self, _: Any): ...

class ComparableProtocol(Protocol):
    def __lt__(self, other: Any) -> bool: ...
    def __le__(self, other: Any) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...

# Tqdm's Comparable must have a _comparable attr/property, and itself,
# fufils the ComparableProtocol protocol.
class Comparable(ComparableProtocol):
    _comparable: ComparableProtocol

# class ObjectWrapper:
#     def __getattr__(self, name: Any): ...
#     def __setattr__(self, name: Any, value: Any): ...
#     def wrapper_getattr(self, name: Any): ...
#     def wrapper_setattr(self, name: Any, value: Any): ...
#     def __init__(self, wrapped: Any) -> None: ...
# 
# class SimpleTextIOWrapper(ObjectWrapper):
#     def __init__(self, wrapped: Any, encoding: Any) -> None: ...
#     def write(self, s: Any): ...
#     def __eq__(self, other: Any) -> Any: ...
# 
# class CallbackIOWrapper(ObjectWrapper):
#     def __init__(self, callback: Any, stream: Any, method: str = ...): ...
# 
# def disp_len(data: Any): ...
# def disp_trim(data: Any, length: Any): ...
